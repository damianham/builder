require 'rails_helper'
<% 
# shorten this
singlename = singular_table_name

rejected_columns = fields.fetch(:except,['id','updated_at','created_at'])

field_names = field_list.reject{|col_name| rejected_columns.include?(col_name.to_sym)}

# override the defaults with a given field list
unless this_fields[:list].nil?
  field_names = this_fields[:list].map{|name| name.to_s  }
end

attribs = []
attributes.select{|attr| field_names.include?(attr.name)}.each do |attr| 
  if attr.password_digest? 
    attribs << "password_digest: '#{BCrypt::Password.create('secret')}'"
    else 
    attribs << "#{attr.column_name}: '#{attr.column_name}-#{attr.default}'"
    end 
  if attr.polymorphic? 
    attribs << "#{attr.column_name}_type: '#{attr.column_name}-#{attr.default}'" 
  end 
end
%>
#   - generated from builder/templates/spec/views/index_spec.erb
RSpec.describe "<%= namespace.nil? ? '' : namespace + '/' %><%= plural_table_name %>/index", :type => :view do
  before(:each) do
    assign(:<%= plural_table_name %>, [
      <%= model_name %>.create!(
        <%= attribs.join(',') %> 
      ),
      <%= model_name %>.create!(
        <%= attribs.join(',') %> 
      )
    ])
  end

  it "renders a list of <%= plural_table_name %>" do
    render 
    
    <% attributes.select{|attr| field_names.include?(attr.name)}.each do |attr|   %>
      assert_select "tr>td", :text => "<%= attr.column_name %>-<%= attr.default %>".to_s, :count => 2 
    <% end %>
      
  end
end
