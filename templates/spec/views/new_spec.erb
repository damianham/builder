require 'rails_helper'
<% 

rejected_columns = fields.fetch(:except,['id','updated_at','created_at'])

field_names = field_list.reject{|col_name| rejected_columns.include?(col_name.to_sym)}

# override the defaults with a given field list
unless this_fields[:form].nil?
  field_names = this_fields[:form].map{|name| name.to_s  }
end

attribs = []
attributes.select{|attr| field_names.include?(attr.name)}.each do |attr| 
  if attr.password_digest? 
    attribs << "password_digest: '#{BCrypt::Password.create('secret')}'"
  else 
    attribs << "#{attr.column_name}: '#{attr.default}'"
  end 
  if attr.polymorphic? 
    attribs << "#{attr.column_name}_type: '#{attr.default}'" 
  end 
end 

%>

RSpec.describe "<%= namespace.nil? ? '' : namespace + '/' %><%= plural_table_name %>/new", :type => :view do
  before(:each) do
    assign(:<%= singular_table_name %>, <%= model_name %>.new(
      <%= attribs.join(',') %> 
    ))
  end

  it "renders new <%= singular_table_name %> form" do
    render

    assert_select "form[action=?][method=?]", <%= namespace.nil? ? '' : namespace + '_' %><%= plural_table_name %>_path, "post" do

    <% attributes.select{|attr| field_names.include?(attr.name)}.each do |attr|  %>
      assert_select "input#<%= singular_table_name %>_<%= attr.column_name %>[name=?]", "<%= singular_table_name %>[<%= attr.column_name %>]"
    <% end %>
    end
  end
end
