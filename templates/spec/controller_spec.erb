require 'rails_helper'

# This spec was generated by builder.
# It demonstrates how one might use RSpec to specify controller code.

# !!!! IMPORTANT !!!
# you need to make some small adjustments to this generated file

# 1. adjust the invalid_attributes (around line 35) e.g. set a required attribute to nil
# 2. adjust the new attributes in describe "PUT update" (around line 112)
# 3. adjust the attribute name in the expect and the new value (around line 121)

# The following text and any further comments are mostly from the RSpec generator
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe <%= model_name %>sController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # <%= model_name %>. As you add validations to <%= model_name %>, be sure to
  # adjust the attributes here as well.
  <% 
    rejected_columns = fields.fetch(:except,['id','updated_at','created_at'])
    attribs = []
    attributes.reject{|attr| rejected_columns.include? attr.column_name}.each do |attr| 
      if attr.password_digest? 
        attribs << "password_digest: '#{BCrypt::Password.create('secret')}'"
      else 
        attribs << "#{attr.column_name}: '#{attr.default}'"
      end 
      if attr.polymorphic? 
        attribs << "#{attr.column_name}_type: '#{attr.default}'" 
      end 
    end 
  
  %>
  let(:valid_attributes) {
    { <%= attribs.join(',') %> }
  }

  ### TODO adjust one of these attributes so the record becomes invalid
  let(:invalid_attributes) {
    {<%= attribs.join(',') %> }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # <%= model_name %>sController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all <%= plural_table_name %> as @<%= plural_table_name %>" do
      <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:<%= plural_table_name %>)).to eq([<%= singular_table_name %>])
    end
  end

  describe "GET show" do
    it "assigns the requested <%= singular_table_name %> as @<%= singular_table_name %>" do
      <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
      get :show, {:id => <%= singular_table_name %>.to_param}, valid_session
      expect(assigns(:<%= singular_table_name %>)).to eq(<%= singular_table_name %>)
    end
  end

  describe "GET new" do
    it "assigns a new <%= singular_table_name %> as @<%= singular_table_name %>" do
      get :new, {}, valid_session
      expect(assigns(:<%= singular_table_name %>)).to be_a_new(<%= model_name %>)
    end
  end

  describe "GET edit" do
    it "assigns the requested <%= singular_table_name %> as @<%= singular_table_name %>" do
      <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
      get :edit, {:id => <%= singular_table_name %>.to_param}, valid_session
      expect(assigns(:<%= singular_table_name %>)).to eq(<%= singular_table_name %>)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new <%= model_name %>" do
        expect {
          post :create, {:<%= singular_table_name %> => valid_attributes}, valid_session
        }.to change(<%= model_name %>, :count).by(1)
      end

      it "assigns a newly created <%= singular_table_name %> as @<%= singular_table_name %>" do
        post :create, {:<%= singular_table_name %> => valid_attributes}, valid_session
        expect(assigns(:<%= singular_table_name %>)).to be_a(<%= model_name %>)
        expect(assigns(:<%= singular_table_name %>)).to be_persisted
      end

      it "redirects to the created <%= singular_table_name %>" do
        post :create, {:<%= singular_table_name %> => valid_attributes}, valid_session
        expect(response).to redirect_to(<%= model_name %>.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved <%= singular_table_name %> as @<%= singular_table_name %>" do
        post :create, {:<%= singular_table_name %> => invalid_attributes}, valid_session
        expect(assigns(:<%= singular_table_name %>)).to be_a_new(<%= model_name %>)
      end

      it "re-renders the 'new' template" do
        post :create, {:<%= singular_table_name %> => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
    
      ### TODO adjust one of these attribute values 
      ## e.g. change name: 'MyString' to name: 'hello' (if you have a 'name' attribute)
      let(:new_attributes) {
        {<%= attribs.join(',') %> }
      }

      it "updates the requested <%= singular_table_name %>" do
        <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
        put :update, {:id => <%= singular_table_name %>.to_param, :<%= singular_table_name %> => new_attributes}, valid_session
        <%= singular_table_name %>.reload
        
        ### TODO replace XXX with the adjusted attribute name and 'new value' with the replaced value
        ## e.g. change XXX to name and 'new value' to 'hello' (if you have a name attribute)
        expect(<%= singular_table_name %>.XXX).to eq('new value')
      end

      it "assigns the requested <%= singular_table_name %> as @<%= singular_table_name %>" do
        <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
        put :update, {:id => <%= singular_table_name %>.to_param, :<%= singular_table_name %> => valid_attributes}, valid_session
        expect(assigns(:<%= singular_table_name %>)).to eq(<%= singular_table_name %>)
      end

      it "redirects to the <%= singular_table_name %>" do
        <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
        put :update, {:id => <%= singular_table_name %>.to_param, :<%= singular_table_name %> => valid_attributes}, valid_session
        expect(response).to redirect_to(<%= singular_table_name %>)
      end
    end

    describe "with invalid params" do
      it "assigns the <%= singular_table_name %> as @<%= singular_table_name %>" do
        <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
        put :update, {:id => <%= singular_table_name %>.to_param, :<%= singular_table_name %> => invalid_attributes}, valid_session
        expect(assigns(:<%= singular_table_name %>)).to eq(<%= singular_table_name %>)
      end

      it "re-renders the 'edit' template" do
        <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
        put :update, {:id => <%= singular_table_name %>.to_param, :<%= singular_table_name %> => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested <%= singular_table_name %>" do
      <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
      expect {
        delete :destroy, {:id => <%= singular_table_name %>.to_param}, valid_session
      }.to change(<%= model_name %>, :count).by(-1)
    end

    it "redirects to the <%= plural_table_name %> list" do
      <%= singular_table_name %> = <%= model_name %>.create! valid_attributes
      delete :destroy, {:id => <%= singular_table_name %>.to_param}, valid_session
      expect(response).to redirect_to(<%= plural_table_name %>_url)
    end
  end

end
