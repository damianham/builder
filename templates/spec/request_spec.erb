require 'rails_helper'
<% 
    rejected_columns = fields.fetch(:except,['id','updated_at','created_at'])
    attribs = []
    attributes.reject{|attr| rejected_columns.include? attr.column_name}.each do |attr| 
      if attr.password_digest? 
        attribs << "password_digest: '#{BCrypt::Password.create('secret')}'"
      else 
        attribs << "#{attr.column_name}: '#{attr.default}'"
      end 
      if attr.polymorphic? 
        attribs << "#{attr.column_name}_type: '#{attr.default}'" 
      end 
    end 
  

base_route = namespace.nil? ? plural_table_name : namespace + '/' + plural_table_name
controller = namespace.nil? ? plural_table_name : namespace + '_' + plural_table_name
%>
RSpec.describe "<%= model_name %>s", :type => :request do
  describe "GET /<%= base_route %>" do
    it "works! (now write some real specs)" do
      get <%= controller %>_path
      expect(response).to have_http_status(200)
    end
  end
  
  describe "create <%= singular_table_name %>" do
    it "creates a <%= singular_table_name %> and redirects to the <%= singular_table_name %>'s page" do
    get "/<%= base_route %>/new"
    expect(response).to render_template(:new)

    post "/<%= base_route %>", :<%= singular_table_name %> => {<%= attribs.join(',') %>}

    expect(response).to redirect_to(assigns(:<%= singular_table_name %>))
    follow_redirect!

    expect(response).to render_template(:show)
    expect(response.body).to include("<%= model_name %> was successfully created.")
  end
  end
end

