'use strict';

<% 

# shorten the accessor name
singlename = singular_table_name
 
# add the belongs_to and has many related classes  
 classes = []
 table_info['belongs_to'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
 
 table_info['has_many'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
%>

/* module */

// model/service
/*
 * return an ngResource object with the default actions
 
{ 'get':    {method:'GET'},
    'save':   {method:'POST'},
    'query':  {method:'GET', isArray:true},
    'remove': {method:'DELETE'},
    'delete': {method:'DELETE'} };
 */ 
angular.module('<%= appname || namespace || "mainapp" %>').factory('<%= model_name %>', ['$resource',
  function($resource){
    return $resource('<%= api_prefix  %><%= plural_table_name %>/:<%= singlename %>Id.json', {}, {
      list: {method:'GET',  isArray:true, cache:true},
      update:   {method:'PUT'},
      range: {method:'GET',  isArray:true, cache:true},
      related: {method:'GET', url: '<%= api_prefix  %><%= plural_table_name %>/:<%= singlename %>Id/related/:relation.json' , isArray:true, cache:true}
    });
  }]);

// list controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ListCtrl', [ '$scope', '$filter', '<%= model_name %>', 
    function ($scope, $filter, <%= model_name %>) {
    
      $scope.reverse = false;
      $scope.itemsPerPage = 25;
      $scope.currentPage = 0;
      $scope.<%= plural_table_name %> = <%= model_name %>.list();
      
      $scope.orderProp = 'id';
      
      $scope.prevPage = function() {
        if ($scope.currentPage > 0) {
          $scope.currentPage--;
        }
      };

      $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
      };

      $scope.pageCount = Math.ceil($scope.<%= plural_table_name %>.length/$scope.itemsPerPage)-1;
  
      // get an array of random page numbers plus the first and last page
      // for the table pager
      $scope.pages = [];
      if ($scope.pageCount < 10) {
        // use all page numbers
        for (x=0; x << $scope.pageCount -1; x++) {
          $scope.pages.push(x);
        }
      } else {
        var step = $scope.pageCount / 10;

        if (step << 2) {
          // use 1st 7 page numbers then step by 3
          for (x=0; x << 7; x++) {
            $scope.pages.push(x);
          }
          for (x=7; x << $scope.pageCount-1; x+= 3) {
            $scope.pages.push(x);
          }
        } else {
          // create 10 equally spaced page numbers 
          for (x=1; x << $scope.pageCount-1; x+= step) {
            $scope.pages.push(x);
          }
        }
        $scope.pages.push($scope.pageCount-1);
      }

      $scope.nextPage = function() {
        if ($scope.currentPage < $scope.pageCount) {
          $scope.currentPage++;
        }
      };

      $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount ? "disabled" : "";
      };
      
      $scope.setPage = function(num) {
        $scope.currentPage = num;
      }
      
      /// end controller 
    }]);


  // detail controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>DetailCtrl', [ '$scope',  '$routeParams',  '<%= model_name %>'   
    , function($scope, $routeParams, <%= model_name %> ) {
      
      $scope.<%= singlename %> = <%= model_name %>.get({<%= singlename %>Id: $routeParams.<%= singlename %>Id});
          
      // get related objects
      <%  
      table_info['belongs_to'].flatten.uniq.each do |key| 
        relation = key.pluralize
      %>
        $scope.<%= singlename %>_<%= relation %> = <%= model_name %>.related({<%= singlename %>Id: $routeParams.<%= singlename %>Id,relation:'<%= relation %>'});        
      <%  end %>
      <%  
      table_info['has_many'].flatten.uniq.each do |key| 
        relation = key.pluralize
      %>
        $scope.<%= singlename %>_<%= relation %> = <%= model_name %>.related({<%= singlename %>Id: $routeParams.<%= singlename %>Id,relation:'<%= relation %>'});        
      <%  end %>
      
    }]);
  
 // form controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>FormCtrl', [ '$scope',  '$routeParams',  '<%= model_name %>'
    <%= classes.size == 0 ? '' : ",'" + classes.join("','") + "'" %>
    , function($scope, $routeParams, <%= model_name %> <%= classes.size == 0 ? '' : "," + classes.join(",")  %>) {
      
  <%- if classes.size > 0 %>
    // get the ranges for foreign keys    - enable/delete as appropriate
    /*
    <%- classes.each do |class_name| %> 
      $scope.<%= class_name.tableize %> = <%= class_name %>.range();
    <% end %>
    */
  <% end %>
          
    <% if has_date_field? %>
      //  stuff for datepicker form field
      $scope.today = function() {
        $scope.current_date = new Date();
      };
      $scope.today();

      $scope.clear = function () {
        $scope.current_date = null;
      };

      // Disable weekend selection
      $scope.date_disabled = function(date, mode) {
        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
      };

      $scope.date_open = function($event) {
        $event.preventDefault();
        $event.stopPropagation();

        $scope.datepicker_opened = true;
      };

      $scope.dateOptions = {
        formatYear: 'yy',
        startingDay: 1
      };

      $scope.date_formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
      $scope.date_format = $scope.date_formats[0];
      
    <% end %>
      
      // process the form
      $scope.processForm = function(formData,isvalid) {
      
        $scope.<%= singlename %>_submitted = true;
        
        if ($scope.<%= singlename %>.id == null) {
             <%= model_name %>.save({  },
            formData, function(data) {
              console.log(data);
              // bind success message to message
              $scope.message = data.message;
              $scope.<%= singlename %>_submitted = false;
            },
            function(data) {
              console.log(data);
            
              $scope.<%= singlename %>_errors = data.errors;
              // bind error message to message
              $scope.message = data.message;
              $scope.<%= singlename %>_submitted = false;
            
            }) ;
        } else {
            <%= model_name %>.update({ <%= singlename %>Id:$scope.<%= singlename %>.id },
            formData, function(data) {
              console.log(data);
              // bind success message to message
              $scope.message = data.message;
              $scope.<%= singlename %>_submitted = false;
            },
            function(data) {
              console.log(data);
            
              $scope.<%= singlename %>_errors = data.errors;
              // bind error message to message
              $scope.message = data.message;
              $scope.<%= singlename %>_submitted = false;
            
            }) ;
        
        }
      };
      
      // create a blank object to hold our form information or load the record
      // $scope will allow this to pass between controller and view
      if ($routeParams.<%= singlename %>Id == null) {
        $scope.<%= singlename %> = new <%= model_name %>();
      } else {
        $scope.<%= singlename %> = <%= model_name %>.get({<%= singlename %>Id: $routeParams.<%= singlename %>Id});
      }
      
    }]);
  
 angular.module('<%= appname || namespace || "mainapp" %>').config(['$routeProvider',   function (provider) {
        provider
<% 
path = '/' + namespaced_url(plural_table_name)
models.select{|m| m[:url].match(path) }.each do |model|   %>     
.when('<%= model[:url] %>', {templateUrl:  '<%= model[:template] %>' ,controller: '<%= model[:controller] %>'})
<% end %>
 ;
}]);