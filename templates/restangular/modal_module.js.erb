'use strict';

<% 

# shorten the accessor name
singlename = singular_table_name
 
# add the belongs_to and has many related classes  
 classes = []
 table_info['belongs_to'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
 
 table_info['has_many'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
%>

/* module */

/*
 * return a Restangular service
 */ 
angular.module('<%= appname || namespace || "mainapp" %>')
  .factory('<%= model_name %>', 
    ['Restangular', function(Restangular){
          return Restangular.service('<%= plural_table_name %>');
      }
  ]);

// list controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ListCtrl', [ '$scope', '$filter', '<%= model_name %>', 
    function ($scope, $filter, <%= model_name %>) {
    
      // list <%= plural_table_name %>
      $scope.reverse = false;
      $scope.itemsPerPage = 25;
      $scope.currentPage = 0;
      
      // data is setup by the promise on completion so set this to an empty array
      // to avoid an undefined error in the filter definition in the main app module
      $scope.<%= plural_table_name %> = [];  
      
      <%= model_name %>.getList().then(function(<%= plural_table_name %>) {
        $scope.<%= plural_table_name %> = <%= plural_table_name %>;
        
        // set these up once the data arrives
        $scope.pageCount = Math.ceil($scope.<%= plural_table_name %>.length/$scope.itemsPerPage)-1;

        // set these up once the data arrives
        $scope.pageCount = Math.ceil($scope.<%= plural_table_name %>.length/$scope.itemsPerPage)-1;

        // get an array of random page numbers plus the first and last page
        // for the table pager -  uses underscore js functions
        if ($scope.pageCount < 10) {
          // use all page numbers
          $scope.pages = _.range(0,$scope.pageCount-1);
        } else { 
          $scope.pages = _.flatten([0,  // prepend the 1st page number
            _.chain(_.range(1,$scope.pageCount-2))  // get a range of page numbers
            .sample(8)   // sample produces a random selection unsorted
            .sortBy( function(num){return num;})  // sort by numeric value
            .value(),$scope.pageCount-1]);  // append the last page number
        }

        $scope.nextPage = function() {
          if ($scope.currentPage < $scope.pageCount) {
            $scope.currentPage++;
          }
        };

        $scope.nextPageDisabled = function() {
          return $scope.currentPage === $scope.pageCount ? "disabled" : "";
        };

      });
      
      $scope.orderProp = 'id';
      
      $scope.prevPage = function() {
        if ($scope.currentPage > 0) {
          $scope.currentPage--;
        }
      };

      $scope.prevPageDisabled = function() {
        return $scope.currentPage === 0 ? "disabled" : "";
      };
      
      $scope.setPage = function(num) {
        $scope.currentPage = num;
      }

      /// end list <%= plural_table_name %>
    }]);


  // detail controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>DetailCtrl', [ '$scope', '$routeParams', '$modal', '<%= model_name %>'   
    , function($scope, $routeParams, $modal, <%= model_name %>) {
      
      <%= model_name %>.one($routeParams.<%= singlename %>Id).get().then(function(<%= singlename %>){
        $scope.<%= singlename %> = <%= singlename %>;
        
        // get related objects
        <%   
          table_info['belongs_to'].flatten.uniq.each do |key| 
            relation = key.singularize
        %>
        // 
        $scope.<%= singlename %>.customGET("related", {relation: "<%= relation %>"}).then(function(<%= relation %>) {
          $scope.<%= singlename %>_<%= relation %> = <%= relation %>;
        });
        <%  end %>
        <%   
          table_info['has_many'].flatten.uniq.each do |key| 
            relation = key
        %>
        // requires adding nested resource routes e.g. <%= plural_table_name %>/1/<%= relation %>
        $scope.<%= singlename %>.getList('<%= relation %>').then(function(<%= relation %>) {
          $scope.<%= singlename %>_<%= relation %> = <%= relation %>;
        });
        <%  end %>
      
      });
      
    }]);
  
 // form controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ModalCtrl', [ '$scope',  '$routeParams', '$modal', '<%= model_name %>', 
 'Restangular', 'CurrentUser','UserResource' <%= classes.size == 0 ? '' : ",'" + classes.join("','") + "'" %>
    , function($scope, $routeParams, $modal, <%= model_name %>, Restangular, CurrentUser, UserResource <%= classes.size == 0 ? '' : "," + classes.join(",")  %>) {
      
  // list <%= plural_table_name %>
    $scope.reverse = false;
    $scope.itemsPerPage = 25;
    $scope.currentPage = 0;

    // data is setup by the promise on completion so set this to an empty array
    // to avoid an undefined error in the filter definition in the main app module
    $scope.<%= plural_table_name %> = [];  

    <%= model_name %>.getList().then(function(<%= plural_table_name %>) {
      $scope.<%= plural_table_name %> = <%= plural_table_name %>;

      // set these up once the data arrives
      $scope.pageCount = Math.ceil($scope.<%= plural_table_name %>.length/$scope.itemsPerPage)-1;

      // get an array of random page numbers plus the first and last page
      // for the table pager -  uses underscore js functions
      if ($scope.pageCount < 10) {
        // use all page numbers
        $scope.pages = _.range(0,$scope.pageCount-1);
      } else { 
        $scope.pages = _.flatten([0,  // prepend the 1st page number
          _.chain(_.range(1,$scope.pageCount-2))  // get a range of page numbers
          .sample(8)   // sample produces a random selection unsorted
          .sortBy( function(num){return num;})  // sort by numeric value
          .value(),$scope.pageCount-1]);  // append the last page number
      }

      $scope.nextPage = function() {
        if ($scope.currentPage < $scope.pageCount) {
          $scope.currentPage++;
        }
      };

      $scope.nextPageDisabled = function() {
        return $scope.currentPage === $scope.pageCount ? "disabled" : "";
      };

    });

    $scope.orderProp = 'id';

    $scope.prevPage = function() {
      if ($scope.currentPage > 0) {
        $scope.currentPage--;
      }
    };

    $scope.prevPageDisabled = function() {
      return $scope.currentPage === 0 ? "disabled" : "";
    };
    
    $scope.setPage = function(num) {
      $scope.currentPage = num;
    }

    // end list <%= plural_table_name %>

    
    // edit/view <%= plural_table_name %>
    // get the current user - useful if the object belongs to a user
    // delete where not necessary
    CurrentUser.getUser(function (data) {
      $scope.current_user = data;

      // get data related to the user, e.g.
      //$scope.photos = UserResource.related({userId: $scope.current_user.id, relation: 'photos'});

    });
      
    
  <%- if classes.size > 0 %>
    // get the ranges for foreign keys    - enable/delete as appropriate
    /*
    <%- classes.each do |class_name| %> 
    Restangular.all('<%= class_name.tableize %>').customGETLIST('range').then(function(<%= class_name.tableize %>) {
      $scope.<%= class_name.tableize %> = <%= class_name.tableize %>;
    });

    <% end %>
    */
  <% end %>
  
    <% if has_date_field? %>
    //  stuff for datepicker form field
    $scope.today = function() {
      $scope.current_date = new Date();
    };
    $scope.today();

    $scope.clear = function () {
      $scope.current_date = null;
    };

    // Disable weekend selection
    $scope.date_disabled = function(date, mode) {
      return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
    };

    $scope.date_open = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.datepicker_opened = true;
    };

    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };

    $scope.date_formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.date_format = $scope.date_formats[0];
  <% end %>
      
    // we can use the same modal function for each view because the view template
    // buttons define what the actions are
    $scope.new_<%= singlename %> = function () {
      $scope.<%= singlename %> = {};
      $scope.<%= singlename %>_modal('lg', '/views/<%= singlename %>/modal_form.html', $scope.<%= singlename %>,[]);
    }; 
    
    $scope.edit_<%= singlename %> = function (<%= singlename %>) {
      $scope.<%= singlename %> = <%= singlename %>;
      $scope.<%= singlename %>_modal('lg', '/views/<%= singlename %>/modal_form.html', $scope.<%= singlename %>, []);
    };    
    
    $scope.view_<%= singlename %> = function (<%= singlename %>) {
      $scope.<%= singlename %> = <%= singlename %>;
      $scope.<%= singlename %>_modal('lg', '/views/<%= singlename %>/modal_detail.html', $scope.<%= singlename %>, []);
    };
    
    // open the modal
    $scope.<%= singlename %>_modal = function (size, template, <%= singlename %>,alerts) {

        $scope.<%= singlename %> = <%= singlename %>;
        $scope.alerts = alerts;

        var modalInstance = $modal.open({
          templateUrl: template,
          controller: function ($scope, $modalInstance, <%= singlename %>,alerts) {
            $scope.<%= singlename %> = <%= singlename %>;
            $scope.alerts = alerts;
            $scope.selected = {
              <%= singlename %>: $scope.<%= singlename %>
            };

            $scope.ok = function () {
              console.log("modal OK pressed");
              $modalInstance.close($scope.<%= singlename %>);
            };

            $scope.cancel = function () {
              $modalInstance.dismiss('cancel');
            };
          },
          size: size,
          resolve: {
            <%= singlename %>: function () {
              return $scope.<%= singlename %>;
            }, 
            alerts: function() {return $scope.alerts}
          }
        });

        modalInstance.result.then(function (<%= singlename %>) {
          console.log("saving <%= singlename %>");
          
          if (<%= singlename %>.id == undefined) {
            <%= model_name %>.post(<%= singlename %>).then(function (data) {
              console.log("saved <%= singlename %> ok"); 
                $scope.<%= plural_table_name %>.push(data); 
                $scope.alerts = [{ type: 'success', msg: 'your new <%= model_name %> has been created'}] ;

              },
              function (data) {
                console.log("error saving <%= singlename %>");
                console.log(data);

                $scope.<%= singlename %>_errors = data.errors;
                $scope.alerts = [{ type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.' }] ;

              });
            } else {
              <%= singlename %>.put().then(function (data) {
                console.log("saved <%= singlename %> ok");

                $scope.alerts = [{type: 'success', msg: 'your <%= model_name %> was updated'}];
              },
                function (data) {
                  console.log("error saving <%= singlename %>");
                  console.log(data);

                  $scope.<%= singlename %>_errors = data.errors;
                  $scope.alerts = [{type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.'}];

              });
            }
        }, function () {
          console.log('Modal dismissed at: ' + new Date());
        });
      };
      
    
  }]);
  
angular.module('<%= appname || namespace || "mainapp" %>').config(['$routeProvider',   function (provider) {
        provider
<% 
path = '/' + namespaced_url(plural_table_name)
models.select{|m| m[:url].match(path) }.each do |model|   %>     
.when('<%= model[:url] %>', {templateUrl:  '<%= model[:template] %>' ,controller: '<%= model[:controller] %>'})
<% end %>
 ;
}]);