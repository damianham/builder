'use strict';

<% 

# shorten the accessor name
singlename = singular_table_name
 
# add the belongs_to and has many related classes  
 classes = []
 table_info['belongs_to'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
 
 table_info['has_many'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
%>

/* module */

/*
 * return a Restangular service
 */ 
angular.module('<%= appname || namespace || "mainapp" %>')
  .factory('<%= model_name %>', 
    ['Restangular', function(Restangular){
          return Restangular.service('<%= plural_table_name %>');
      }
  ]);
  
// setup the modal openers
function setup_modal($scope,$modal,service) {

    // we can use the same modal function for each view 
    // the detail view will only have a close button
    
    $scope.new_<%= singlename %> = function () {
      $scope.<%= singlename %> = {};
      $scope.<%= singlename %>_modal('lg', '/views/<%= singlename %>/modal_form.html',[]);
    }; 
    
    $scope.edit_<%= singlename %> = function (<%= singlename %>) {
      $scope.<%= singlename %> = <%= singlename %>;
      $scope.<%= singlename %>_modal('lg', '/views/<%= singlename %>/modal_form.html', []);
    };    
    
    $scope.view_<%= singlename %> = function (<%= singlename %>) {
      $scope.<%= singlename %> = <%= singlename %>;
      $scope.<%= singlename %>_modal('lg', '/views/<%= singlename %>/modal_detail.html', []);
    };
    
    // open the modal
    $scope.<%= singlename %>_modal = function (size, template, alerts) {

        $scope.alerts = alerts;

        var modalInstance = $modal.open({
          templateUrl: template,
          controller: function ($scope, $modalInstance, <%= singlename %>,alerts) {
            $scope.<%= singlename %> = <%= singlename %>;
            $scope.alerts = alerts;
            $scope.selected = {
              <%= singlename %>: $scope.<%= singlename %>
            };

            $scope.ok = function () {
              console.log("modal OK pressed");
              $modalInstance.close($scope.<%= singlename %>);
            };

            $scope.cancel = function () {
              $modalInstance.dismiss('cancel');
            };
          },
          size: size,
          resolve: {
            <%= singlename %>: function () {
              return $scope.<%= singlename %>;
            }, 
            alerts: function() {return $scope.alerts}
          }
        });

        modalInstance.result.then(function (<%= singlename %>) {
          console.log("saving <%= singlename %>");
          
          if (<%= singlename %>.id == undefined) {
            service.post(<%= singlename %>).then(function (data) {
              console.log("saved <%= singlename %> ok"); 
                $scope.<%= plural_table_name %>.push(data); 
                $scope.alerts = [{ type: 'success', msg: 'your new <%= model_name %> has been created'}] ;

              },
              function (data) {
                console.log("error saving <%= singlename %>");
                console.log(data);

                $scope.<%= singlename %>_errors = data.errors;
                $scope.alerts = [{ type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.' }] ;

              });
          } else {
              <%= singlename %>.put().then(function (data) {
                console.log("saved <%= singlename %> ok");

                $scope.alerts = [{type: 'success', msg: 'your <%= model_name %> was updated'}];
              },
                function (data) {
                  console.log("error saving <%= singlename %>");
                  console.log(data);

                  $scope.<%= singlename %>_errors = data.errors;
                  $scope.alerts = [{type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.'}];

              });
          }
        }, function () {
          console.log('Modal dismissed at: ' + new Date());
        });
      };
      
}  // end setup_modal


// list controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ListCtrl', [ '$scope', '$filter', '$modal', '<%= model_name %>', 
    function ($scope, $filter, $modal, <%= model_name %>) {
    
    // setup the <%= plural_table_name %> to an empty list initially
    $scope.<%= plural_table_name %> = [];
    
    // setup the data and paging - defined in app/assets/javascripts/generated/app/controller_methods.js
    setup_paging($scope,<%= model_name %>,function(<%= plural_table_name %>){$scope.<%= plural_table_name %> = <%= plural_table_name %>;});
    
    setup_modal($scope,$modal,<%= model_name %>);
    
    }]);


  // detail controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>DetailCtrl', [ '$scope', '$routeParams', '$modal', '<%= model_name %>'   
    , function($scope, $routeParams, $modal, <%= model_name %>) {
      
      <%= model_name %>.one($routeParams.<%= singlename %>Id).get().then(function(<%= singlename %>){
        $scope.<%= singlename %> = <%= singlename %>;
        
        // get related objects
        <%   
          table_info['belongs_to'].flatten.uniq.each do |key| 
            relation = key.singularize
        %>
        // 
        $scope.<%= singlename %>.customGET("related", {relation: "<%= relation %>"}).then(function(<%= relation %>) {
          $scope.<%= singlename %>_<%= relation %> = <%= relation %>;
        });
        <%  end %>
        <%   
          table_info['has_many'].flatten.uniq.each do |key| 
            relation = key
        %>
        // requires adding nested resource routes e.g. <%= plural_table_name %>/1/<%= relation %>
        $scope.<%= singlename %>.getList('<%= relation %>').then(function(<%= relation %>) {
          $scope.<%= singlename %>_<%= relation %> = <%= relation %>;
        });
        <%  end %>
      
      });
      
      setup_modal($scope,$modal,<%= model_name %>);
      
    }]);
  
 // form controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ModalCtrl', [ '$scope',   '$modal', '<%= model_name %>', 
 'Restangular', 'CurrentUser','UserResource' <%= classes.size == 0 ? '' : ",'" + classes.join("','") + "'" %>
    , function($scope,  $modal, <%= model_name %>, Restangular, CurrentUser, UserResource <%= classes.size == 0 ? '' : "," + classes.join(",")  %>) {
      
    // setup the <%= plural_table_name %> to an empty list initially
    $scope.<%= plural_table_name %> = [];
    
    // setup the data and paging - defined in app/assets/javascripts/generated/app/controller_methods.js
    setup_paging($scope,<%= model_name %>,function(<%= plural_table_name %>){$scope.<%= plural_table_name %> = <%= plural_table_name %>;});
    
    // edit/view <%= plural_table_name %>
    // get the current user - useful if the object belongs to a user
    // enable/delete as appropriate
    /*
    CurrentUser.getUser(function (data) {
      $scope.current_user = data;

      // get data related to the user, e.g.
      //$scope.photos = UserResource.related({userId: $scope.current_user.id, relation: 'photos'});

    });
    //*/
    
  <%- if classes.size > 0 %>
    // get the ranges for foreign keys    - enable/delete as appropriate
    /*
    <%- classes.each do |class_name| %> 
    Restangular.all('<%= class_name.tableize %>').customGETLIST('range').then(function(<%= class_name.tableize %>) {
      $scope.<%= class_name.tableize %> = <%= class_name.tableize %>;
    });

    <% end %>
    //*/
  <% end %>
  
  <% if has_date_field? %>
    //  setup stuff for datepicker form field - defined in app/assets/javascripts/generated/app/controller_methods.js
    setup_datepicker($scope);
  <% end %>
      
    // setup the event handlers to open modal dialog for new/view/edit <%= singlename %> actions
    setup_modal($scope,$modal,<%= model_name %>);
    
  }]);
  
angular.module('<%= appname || namespace || "mainapp" %>').config(['$routeProvider',   function (provider) {
        provider
<% 
path = '/' + namespaced_url(plural_table_name)
models.select{|m| m[:url].match(path) }.each do |model|   %>     
.when('<%= model[:url] %>', {templateUrl:  '<%= model[:template] %>' ,controller: '<%= model[:controller] %>'})
<% end %>
 ;
}]);