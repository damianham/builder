'use strict';

<% 

# shorten the accessor name
singlename = singular_table_name
 
# add the belongs_to and has many related classes  
 classes = []
 table_info['belongs_to'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
 
 table_info['has_many'].flatten.uniq.each do |key|
   classes << key.to_model_name
 end
%>

/* module */

// list controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>ListCtrl', [ '$scope', '$filter',  'Restangular', 
    function ($scope, $filter,   Restangular) {
    
    // setup the <%= plural_table_name %> to an empty list initially
    $scope.<%= plural_table_name %> = [];
    
    var base = Restangular.all('<%= plural_table_name %>');
    
    // setup the data and paging - defined in app/assets/javascripts/generated/app/controller_methods.js
    setup_paging($scope,base,function(<%= plural_table_name %>){$scope.<%= plural_table_name %> = <%= plural_table_name %>;});
    
    }]);

  // detail controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>DetailCtrl', [ '$scope', '$routeParams',   'Restangular'   
    , function($scope, $routeParams,  Restangular) {
      
    var base = Restangular.all('<%= plural_table_name %>');
    
      base.one($routeParams.<%= singlename %>Id).get().then(function(<%= singlename %>){
        $scope.<%= singlename %> = <%= singlename %>;
        
        // get related objects  - enable/delete as appropriate
        /*
        <%   
          table_info['belongs_to'].flatten.uniq.each do |key| 
            relation = key.singularize
        %>
        // 
        $scope.<%= singlename %>.customGET("related", {relation: "<%= relation %>"}).then(function(<%= relation %>) {
          $scope.<%= singlename %>_<%= relation %> = <%= relation %>;
        });
        <%  end %>
        <%   
          table_info['has_many'].flatten.uniq.each do |key| 
            relation = key
        %>
        // requires adding nested resource routes e.g. <%= plural_table_name %>/1/<%= relation %>
        $scope.<%= singlename %>.getList('<%= relation %>').then(function(<%= relation %>) {
          $scope.<%= singlename %>_<%= relation %> = <%= relation %>;
        });
        <%  end %>
        //*/
      });
      
    }]);
    
    
 // form controller
angular.module('<%= appname || namespace || "mainapp" %>')
 // enclose dependencies as strings within brackets to avoid minification and create the
 // controller as an anonymous function
 .controller('<%= model_name %>FormCtrl', [ '$scope',  '$routeParams',   'Restangular' 
    , function($scope, $routeParams,  Restangular  ) {
      
    var base = Restangular.all('<%= plural_table_name %>');

  <%- if classes.size > 0 %>
    // get the ranges for foreign keys    - enable/delete as appropriate
    /*
  <%- classes.each do |class_name| %> 
    Restangular.all('<%= class_name.tableize %>').customGETLIST('range').then(function(<%= class_name.tableize %>) {
      $scope.<%= class_name.tableize %> = <%= class_name.tableize %>;
    });

  <% end %>
    */
<% end %>
    
  <% if has_date_field? %>
    //  setup stuff for datepicker form field - defined in app/assets/javascripts/generated/app/controller_methods.js
    setup_datepicker($scope);
  <% end %>
       
    // process the form
    $scope.processForm = function(formData,isvalid) {

      $scope.<%= singlename %>_submitted = true;

      if ($scope.<%= singlename %>.id == null) {
        base.post(formData).then( function(data) {
          console.log("saved new <%= model_name %>");
          // bind success message to message
          $scope.message = data.message;
          $scope.<%= singlename %>_submitted = false;
        },
        function(data) {
          console.log("Error saving new <%= model_name %>");
          console.log(data);

          $scope.<%= singlename %>_errors = data.errors;
          // bind error message to message
          $scope.message = data.message;
          $scope.<%= singlename %>_submitted = false;

        }) ;
      } else {
        $scope.<%= singlename %>.save().then( function(data) {
          console.log("saved <%= model_name %>");
          // bind success message to message
          $scope.message = data.message;
          $scope.<%= singlename %>_submitted = false;
        },
        function(data) {
          console.log("Error saving <%= model_name %>");
          console.log(data);

          $scope.<%= singlename %>_errors = data.errors;
          // bind error message to message
          $scope.message = data.message;
          $scope.<%= singlename %>_submitted = false;
        });
      }
    };

  // create a blank object to hold our form information or load the record
  // $scope will allow this to pass between controller and view
  if ($routeParams.<%= singlename %>Id == null) {
    $scope.<%= singlename %> = {};
  } else {
    base.one($routeParams.<%= singlename %>Id).get().then(function(data){
      $scope.<%= singlename %> = data;
    });        
  }

}]);
  
 angular.module('<%= appname || namespace || "mainapp" %>').config(['$routeProvider',   function (provider) {
        provider
<% 
path = '/' + namespaced_url(plural_table_name)
models.select{|m| m[:url].match(path) }.each do |model|   %>     
.when('<%= model[:url] %>', {templateUrl:  '<%= model[:template] %>' ,controller: '<%= model[:controller] %>'})
<% end %>
 ;
}]);