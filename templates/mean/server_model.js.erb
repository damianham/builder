'use strict';
<% 
columns = ["  user: {type: Schema.ObjectId, ref: 'User'}"]
# avoid duplicates - in the case where two ids reference the same table
seen = {'users' => true}
# do not add 'id' column
table_info['columns'].reject{|k| k == 'id'}.each_pair do |name,column| 
  # change the name to a name  according to MEAN apps conventions
  name = name_to_mongo(name)
  
  # if this is an ID column then add it as a reference field instead
  if name =~ /_id$/
    colname = name.gsub(/_id/,'')
    columns << "  #{colname.singularize}: {type: Schema.ObjectId, ref: '#{colname.to_model_name}'}"
  else
    type = bson_data_type(column['data_type'].to_sym)
    text = "  " + name + ": {\n"
    text += "    type: " + type + ",\n" 
    text += "    default: " + (bson_default_value(column['column_default'],column['data_type'].to_sym) || "''") 

    if type == 'String'
      text += ",\n    trim: true"
    end
    if column['is_nullable'] == 'NO'
      text += ",\n    required: '#{name} cannot be blank'" 
    end
    columns << text + '}'
  end
  
  seen[name] = true
  end 

table_info['belongs_to'].flatten.each do |key|
  columns << "  #{key.singularize}: {type: Schema.ObjectId, ref: '#{key.to_model_name}'}" unless seen[key] == true
  seen[key] = true
end

%>
/**
 * Module dependencies.  - generated from builder/templates/mean/server_model.js.erb
 */
var mongoose = require('mongoose'),
	Schema = mongoose.Schema;

/**
 * <%= model_name %> Schema
 */
var <%= model_name %>Schema = new Schema({

<%= columns.join(",\n") %>

});

mongoose.model('<%= model_name %>', <%= model_name %>Schema);
